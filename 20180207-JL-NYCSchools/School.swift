//
//  School.swift
//  NYC Schools
//
//  Created by Jason Lu on 2/7/18.
//  Copyright Â© 2018 Jason Lu. All rights reserved.
//

import Foundation

/// Struct that represents a school. Only contains the school_name field.
struct School: Codable {
    var school_name: String
    var dbn: String
    var overview_paragraph: String
    
    /// Makes a GET request to the 2017 DOE HS Directory endpoint. Decodes the JSON data into an array of schools.
    ///
    /// - Parameter completionHandler: Handler from SchoolsTableViewController that assigns an array to the array generated by the decoding.
    static func allSchools(completionHandler: @escaping ([School]?, Error?) -> Void) {
        let endpoint = "https://data.cityofnewyork.us/resource/97mf-9njv.json?$$app_token=VJ9GbstI4cgMtcsXDY1XUzk0i"
        guard let url = URL(string: endpoint) else {
            print("Error: cannot create URL")
            return
        }
        let urlRequest = URLRequest(url: url)
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest) {
            (data, response, error) in
            guard let responseData = data else {
                print("Error: did not receive data")
                completionHandler(nil, error)
                return
            }
            guard error == nil else {
                completionHandler(nil, error)
                return
            }
            print(responseData)
            let decoder = JSONDecoder()
            do {
                let schools = try decoder.decode([School].self, from: responseData)
                completionHandler(schools, nil)
            } catch {
                print("error trying to convert data to JSON")
                print(error)
                completionHandler(nil, error)
            }
        }
        task.resume()
    }
}

/// Struct to represent the School Details. Contains the necessary SAT scores.
struct SchoolDetail: Codable {
    var sat_critical_reading_avg_score: String
    var sat_math_avg_score: String
    var sat_writing_avg_score: String
    var num_of_sat_test_takers: String
    
    
    /// Creates a url with parameters.
    ///
    /// - Parameter name: school name
    /// - Returns: URL with parameters
    static func endpointForSchoolName(_ dbn: String) -> URL? {
        var urlComponents = URLComponents(string: "https://data.cityofnewyork.us/resource/734v-jeq5.json")!
        urlComponents.queryItems = [URLQueryItem(name: "dbn", value: dbn), URLQueryItem(name: "$$app_token", value: "VJ9GbstI4cgMtcsXDY1XUzk0i")]
        
        return urlComponents.url
    }
    
    /// Makes GET request to the 2012 SAT Score endpoint. It only filters by the given school name to avoid bulk data.
    ///
    /// - Parameters:
    ///   - name: Name of the school to call to.
    ///   - completionHandler: Handler passed from SchoolDetailViewController.
    static func schoolByName(_ dbn: String, completionHandler: @escaping ([SchoolDetail]?, Error?) -> Void) {
        let endpoint = SchoolDetail.endpointForSchoolName(dbn)
        guard let url = endpoint else {
            print("Error: cannot create URL")
            return
        }
        print(url)
        let urlRequest = URLRequest(url: url)
        let session = URLSession.shared
        let task = session.dataTask(with: urlRequest, completionHandler: { (data, response, error) in
            guard error == nil else {
                completionHandler(nil, error!)
                return
            }
            guard let responseData = data else {
                print("Error: Did not receive data")
                return
            }
            print(responseData)
            let decoder = JSONDecoder()
            do {
                let schoolDetail = try decoder.decode([SchoolDetail].self, from: responseData)
                completionHandler(schoolDetail, nil)
            } catch {
                print("error trying to convert data to JSON")
                print(error)
                completionHandler(nil, error)
            }
        })
        task.resume()
    }
}




